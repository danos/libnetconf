--- a/src/transport.c
+++ b/src/transport.c
@@ -1236,6 +1236,8 @@
 	char* const sshd_argv[] = {"/usr/sbin/sshd", "-ddd", "-i", NULL};
 	char* const stunnel_argv[] = {"/usr/sbin/stunnel", NULL};
 	NC_TRANSPORT *transport_proto;
+	unsigned int loop;
+	unsigned int delay = reconnect_secs;
 
 	if (server_path == NULL) {
 		pthread_once(&transproto_key_once, transproto_init);
@@ -1280,7 +1282,17 @@
 	}
 
 	/* since host_list is supposed to be ring list, this is potentially never ending loop */
-	for (srv_iter = host_list; srv_iter != NULL; srv_iter = srv_iter->next) {
+	for (loop = 0, srv_iter = host_list; srv_iter != NULL; srv_iter = srv_iter->next) {
+		/* when we loop to the beginning of the list, double the reconnect_secs */
+		if (srv_iter == host_list) {
+			if (delay < UINT8_MAX) {
+				delay = (1 << loop) * reconnect_secs;
+				if (delay > UINT8_MAX)
+					delay = UINT8_MAX;
+				else
+					++loop;
+			}
+		}
 		for (addr = srv_iter->addr; addr != NULL; addr = addr->ai_next) {
 			switch (addr->ai_family) {
 			case AF_INET:
@@ -1309,7 +1321,8 @@
 			for (i = 0; i < reconnect_count; i++) {
 				if (connect(sock, addr->ai_addr, addr->ai_addrlen) == -1) {
 					WARN("Connecting to %s:%u failed (%s)", addr_buf, port, strerror(errno));
-					sleep(reconnect_secs);
+					VERB("Waiting %u secs to retry.", delay);
+					sleep(delay);
 					continue;
 				}
 				VERB("Connected to %s:%u.", addr_buf, port);
